#!/usr/bin/python3

import argparse
import argcomplete
import sys
import os

from choices_completer import ChoicesCompleter
from utils import get_configurations, get_executables

def build_command(args):
	command = ""

	configuration = f'out/{args.configuration}'

	if not args.no_build:
		command = f"autoninja -C {configuration} {args.executable} && " + command

	execute = f'./{configuration}/{args.executable} --gtest_filter="*{args.filter}*"'
	if args.additional:
		execute = f'{execute} {" ".join(args.additional)}'

	if args.visible:
		command += f'{execute} --enable-pixel-output-in-tests --ui-test-action-max-timeout=1000000 --test-launcher-timeout=1000000 --vmodule=bookmark_app_navigation*=1'
	else:
		command += f'xvfb-run -s "-screen 0 1024x768x24" {execute}'

	return command

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="Run chrome tests.")

	parser.add_argument('filter')
	parser.add_argument('--no-build', action='store_true')
	parser.add_argument('-V', '--visible', action='store_true')
	parser.add_argument('-C', '--configuration', default='Default', choices=get_configurations())
	parser.add_argument('-E', '--executable', default='browser_tests').completer = ChoicesCompleter(get_executables())

	# Store extra arguments to pass to test executable.
	parser.add_argument('additional', nargs=argparse.REMAINDER, default=[])

	argcomplete.autocomplete(parser)
	args = parser.parse_args(sys.argv[1:])

	command = build_command(args)
	print(command)

	os.system(command)
  

